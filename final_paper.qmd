---
title: |
 | ECO285 Case 7: 
 | Research Affiliates and Dynamic Multifactor Strategies
author:
- "Group C: Chaira, Simi, Melanie, Ellie"
format:
  html: 
    standalone: true
    title-block-banner: true
    theme: simplex
    fontsize: 1.0em
    number-sections: true
    number-depth: 3
    toc: false
  pdf:
    number-sections: true
    number-depth: 3
    toc: false
    number-by-section: false
    include-in-header: 
      text: |
        \newcolumntype{d}{S[input-symbols = ()]}
        \usepackage{rotating}

---
Research Affiliates was a leading firm in using fundamental weighting as a portfolio indexing strategy. Fundamental weighting is a value-based weighting strategy, and prior to their PIMCO RAFI dynamic multifactor ETF, Research Affiliates had only focused on these fundamentally weighted products. Our analysis focuses on the PIMCO RAFI dynamic multifactor ETF and how it should be adjusted after its first four years on the market. 

Several pivotal decisions face the Research Affiliates team regarding the future of the strategy underlying the PIMCO RAFI Multifactor ETF (MFUS). MFUS delivered an aggregate return of 10.02% from December 2017 to February 2021, underperforming the broader market’s return of 14.56% by 4.54%, as indexed by the Russell 1000. MFUS also trailed competing ETFs that employed the same dynamic, multifactor strategy, such as the Invesco Russell 1000 Dynamic Multifactor ETF (OMFL), which returned 18.4% in the same period. This underperformance to both the benchmark and competitors prompted a review of three key elements of Research Affiliates’ strategy: factor selection, the dynamic allocation methodology, and the use of fundamental weighting.

Research Affiliates selected five smart-beta strategies with low and negative correlations for MFUS: value, low volatility, quality, momentum, and size. From 1968 to 2016, these factors averaged an annual return of 13.14% (Exhibit 13). Beyond historical performance, valuation-based predictability supported their inclusion. For example, the RAFI Fundamental Index, which weights companies using four fundamental value measures, shows a negative relationship between price-to-book (P/B) ratio and future five-year returns, suggesting that cheaper strategies tend to produce higher future returns (Exhibit 1). The Low Volatility Index similarly demonstrates a decline in returns as the P/B ratio increases, with expected 5-year returns falling from around 18% to -13% as the P/B ratio increases from around 0.3 to 0.8, suggesting that the strategy is sensitive to relative valuation, making it better suited for timing in the dynamic strategy (Exhibit 1).

In contrast, the Momentum factor demonstrates a weaker, more dispersed relationship. Returns are clustered in the 0-10% range across a broader range of P/B ratios (1-5) relative to Volatility, which suggests that timing offers limited predictability for this factor, based on valuation. Despite this, momentum received high allocations in practice, ranging from 18% to 35%, the upper limit, which suggests its z-score was driven more by recent outperformance than by valuation reversion. The divergence in responsiveness of different factors to valuation-based timing is a key limitation in Research Affiliates’ strategy. While the low-volatility factor responds well to valuation-based timing, other factors, such as momentum, are better captured through other measures that are not accounted for in the allocation strategy.

MFUS’s dynamic allocation methodology adjusts weights based on two timing signals: factor reversal (performance over the last 5 years) and factor momentum (return over the previous year). These signals are standardized into z-scores, which then determine shifts in the dynamic allocation. From 2016 to 2020, the Low Volatility factor saw the widest allocation range of the five factors, ranging from around 8% to 30%. This wide range reflects the sensitivity of the volatility factor to valuation, where returns sharply decline as P/B ratios increase, supporting significant allocation shifts as valuations rise. The Momentum allocation shows a narrower allocation range from around 18% to 35%, the upper limit. Momentum’s high, relatively stable allocation is driven more by strong recent performance than valuation reversals, as Exhibit 1 shows the Momentum factor displays a weak, more dispersed relationship between the P/B ratio and future returns, which shows clustering around the 10% return ratio regardless of valuation. 

This relationship suggests that valuation-based timing is less effective for the Momentum factor relative to factors with a stronger valuation/return relationship, suggesting its allocation shifts were more likely to be driven by positive-momentum z-scores. This uneven responsiveness across valuation-sensitive factors is a key limitation of the dynamic allocation strategy, where it performs better for valuation-sensitive factors but is less effective for trend-based factors like momentum, which persist despite appearing to be more expensive.

MFUS utilizes a fundamental weighting strategy rather than the more commonly used market capitalization approach, aiming to anchor portfolio weights in long-term business fundamentals, rather than market sentiment. The strategy determined company weights by averaging four accounting-based measures: de-levered sales, operating cash flow, average dividends paid and share buybacks, and most recent book value. These variables favor companies with strong and consistent fundamentals historically associated with future returns, which is necessary in the strategy that aims to use value-tilted factors to reduce exposure to overvalued stocks. This valuation strategy seeks to offer protection during speculative periods, such as the late 1990s tech bubble, which saw overpriced growth stocks put a drag on returns.

However, the value-tilted design created a value bias that limited MFUS’s exposure to growth-driven companies. MFUS allocated 61% to large-cap stocks and just 10% to small-caps, while competing ETF OMFL allocated 61% of its portfolio to mid-cap stocks. Sector composition within MFUS skewed towards sensitive sectors (40.72% of allocation), namely technology (18.09%) and industrials (11.4%), while OMFL weighed heavily in cyclical sectors (53.46%), specifically financials (24.14%) and consumer cyclical companies (19.46%). These sector tilts allowed OMFL to reap more rewards from the economic expansion that defined much of the period from 2017 to early 2020, while MFUS’s value tilt lagged. 

Exhibit 12 shows that MFUS had top portfolio weightings in large, stable companies, averaging P/B ratios of \$3.34, such as Apple (2.62%), Walmart (1.72%), and Home Depot (1.38%), consistent with the fundamental weighting strategy. OMFL held higher weights in mid-cap, more economically-sensitive firms that averaged P/B ratios of \$3.05, such as ViacomCBS (1.06%) and United Rentals (0.92%) that benefited from cyclical growth. The divergence in portfolio design is seen in portfolio turnover, where OMFL’s turnover ratio of 321% indicates high-frequency rebalancing, while MFUS’s 36% turnover ratio is more consistent with its long-term, valuation focus and reliance on more slowly evolving fundamental metrics.

The PIMCO RAFI Dynamic Multifactor ETF (MFUS) implements a dynamic weighting strategy designed by Research Affiliates, aiming to outperform static multifactor models by tactically allocating more capital to factors that appear cheap or have performed well recently. This contrasts with ETFs like Invesco’s OMFL, which also uses a multifactor framework but relies more heavily on macroeconomic regime-based factor tilts. 

The primary strength of dynamic weighting is its theoretical ability to improve returns by adapting factor exposures based on changing market conditions. This approach recognizes that factors are cyclical. Value and Size, for instance, may underperform for several years before experiencing rebounds. By overweighting factors that have underperformed over a 4-year horizon but shown recent 12-month strength, MFUS seeks to enter those rebounds early. This approach also addresses a common critique of static models which is that they may remain overexposed to expensive or overcrowded factors.

Another benefit is flexibility. A dynamic model can reduce exposure to factors that are expensive or exhibiting negative momentum, potentially avoiding extended periods of underperformance. This ability to tilt away from crowded trades or overvalued factors could help improve risk-adjusted returns compared to static equal-weighted approaches.

Despite its appeal, dynamic weighting is not without risks. It depends heavily on the reliability of the timing signals used. These signals can fail, especially during economic shifts. From 2017 to 2021, MFUS significantly underperformed both the Russell 1000 and competitor multifactor ETFs like OMFL, calling into question the effectiveness of its timing approach. This underperformance suggests that even well-designed dynamic models may be prone to mis-timing or may overweight structurally underperforming factors like Value, especially when traditional valuation metrics do not capture intangible value well.

OMFL (Invesco) offers a helpful comparison. While it also rotates factor exposures, it does so based on a macroeconomic regime model, adjusting exposure to factors like Low Volatility or Momentum based on growth, inflation, and risk conditions. Its approach has delivered stronger recent returns, suggesting that macro-based timing may have been more effective than valuation/momentum-based timing during this period.


For our quantitative analysis, we evaluated the performance of four U.S. equity ETFs: MFUS (PIMCO RAFI Dynamic Multi-Factor), OMFL (Invesco Russell 1000 Dynamic Multifactor), LRGF (iShares MSCI USA Multifactor), and IWB (iShares Russell 1000). We used both the CAPM as well as a 7-factor model that includes exposures to size (SMB), value (HML), profitability (RMW), investment (CMA), momentum (MOM), and volatility (VOL).

We started our analysis by estimating CAPM and 7-factor regressions for each of the four ETFs using monthly return data over both the short (2017-2021) sample. CAPM estimates how much an ETF outperforms or underperforms the market index after adjusting for market risk, whereas the 7-factor model takes into account more systematic risk. Across all of the ETFs, we find that CAPM alphas are slightly negative, which indicates underperformance relative to the market. In comparison, the 7-factor alphas are more negative, which could suggest the ETFs’ exposures to other factors did not explain their underperformance and may have even contributed to a degree to it.

Then, we decomposed each ETF’s CAPM alpha into two components: the 7-factor alpha (unexplained return) and the sum of the ETF’s factor loadings multiplied by the CAPM alpha of each factor (explained return from factor tilts). For all four ETFs, we found the 7-factor alpha as well as the factor contribution component to be negative. This implies the ETFs failed to generate excess returns beyond the factor model, but also that their tilts toward certain factors (like value or momentum) hurt their performance during the sample period (2017-2021).

Based on the alpha values shown in Figure X and standard error values for each of the ETFs and their corresponding CAPM and 7-factor models, we see that for the short sample time period (2017-2012), all of the ETFs underperformed based on their negative CAPM values. MFUS_CAPM underperformed the market by 8.7% yearly and the 7-factor figure was even greater, at a 112.4% yearly underperformance. For all of the figures, we can also see that they are statistically significant.


Based on our analysis, we have determined that Research Affiliates’ weighting strategy prevents MFUS from allocating more weight to growth factors when value factors are expected to underperform. Research Affiliates allocates weights to all factors using fundamental weighting, a value-based strategy. Since fundamental weighting will recommend greater weights for stocks that are expected to perform well using a value-based strategy, the portfolio will still be mostly exposed to value stocks instead of growth stocks. 

The purpose of the PIMCO RAFI Dynamic Multifactor ETF was to allocate large weights to value factors when it seemed like value factors would outperform growth factors, and large weights to growth factors when it seemed like they would outperform value. Since the fundamental weighting prevents the ETF from allocating more weight to growth factors when it seems they will outperform value, we recommend that Research Affiliates reconsider its weighting strategy. One solution would be to use market-capitalization weighting for growth factors and fundamental weighting for value factors. Market-capitalization weighting is used within the growth strategy and will better allocate weights based on the growth factors’ expected performance.

Our analysis of the performance of another dynamic multifactor ETF and a static multifactor ETF compared to a market index and the PIMCO RAFI Dynamic Multifactor ETF suggests that the dynamic multifactor strategy should be kept. Research Affiliates is correct in their theory that a dynamic multifactor strategy will allow them to optimize their performance by exposing themselves to the strategy that would perform best over the next period. A better weighting strategy will allow Research Affiliates to benefit from the dynamic allocations across factors.


# Appendix

## Set Up and Data

```{r}
#| label: setup
#| output: false

# here::i_am("analysis/regression.qmd")
# library(here)

library(frenchdata)

library(tidyverse)
library(tidyquant)
library(lubridate)
library(knitr)
library(dplyr)
library(tsibble)
library(tidyr)

library(PortfolioAnalytics)
library(DEoptim)
library(ROI)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)

# library(readxl)
library(readr)
library(zoo)
library(modelsummary)
library(lmtest)
library(sandwich)
library(broom)


# Set global options (for all chunks, unless otherwise specified)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)

options(scipen = 999) # to avoid displaying numbers in scientific notation
```


```{r}
#| echo: false

# The four ETFs we want to analyze
etfs <- c("MFUS", "OMFL", "LRGF", "IWB")

# Load data from Yahoo Finance
etf_prices <- tq_get(etfs,
                     from = "2017-12-01",
                     to = "2021-02-28",
                     get = "stock.prices")

# Load the 7-factor data
etf_monthly_returns <- etf_prices |>
  group_by(symbol) |>
  tq_transmute(select = adjusted,
               mutate_fun = periodReturn,
               period = "monthly",
               type = "log")

```


```{r}
#| echo: false

ff_5factors <- download_french_data("Fama/French 5 Factors (2x3)")
momentum <- download_french_data("Momentum Factor (Mom)")

factors <- ff_5factors$subsets$data[[1]] |>
  left_join(momentum$subsets$data[[1]], by = "date") |>
  mutate(across(-date, \(x) x / 100)) |>  # scale to decimals
  rename(
    MOM = Mom,      
    MKT = `Mkt-RF`
  )

# Now separately:
factors <- factors |>
  mutate(
    yearmon = yearmonth(ym(date)),
    date = ymd("1963-07-31") %m+% months(0:(nrow(factors) - 1))
  ) |>
  select(date, yearmon, MKT, SMB, HML, RMW, CMA, MOM, RF)

head(factors)
```



```{r}
#| echo: false

# First, clean lowvol -- we actually want to use the VOL column
lowvol <- read_csv("lowvol.csv")
colnames(lowvol)[1] <- "date"

lowvol <- lowvol |>
  mutate(
    month_part = substr(date, 1, 3),
    year_part = substr(date, 5, 6),
    year_numeric = as.numeric(year_part),
    full_year = ifelse(year_numeric < 25, paste0("20", year_part), paste0("19", year_part)),
    full_date = paste0("01-", month_part, "-", full_year),
    date = as.Date(full_date, format = "%d-%b-%Y"),
    yearmon = as.yearmon(date)    
  )

# Then merge
factors <- factors %>%
  mutate(yearmon = as.yearmon(date)) %>%
  left_join(lowvol, by = "yearmon")

#ChatGPT helped add title to date column and convert character to date
```

```{r}
#| echo: false

head(factors)
```


## Quantitative Analysis Section

### AVERAGE RETURNS 2017 - 2021
```{r}
#| echo: false

#Question 5

# AVERAGE RETURNS 2017 - 2021

# edit: need to change data for Small LowVOL -- DONE

# avg returns for second short period

case_sample <- factors %>%
  filter(yearmon >= as.yearmon("2017-12") & yearmon <= as.yearmon("2021-02")) %>%
  select(-c(yearmon, date.y,month_part,year_part,year_numeric,full_year,full_date)) %>%
  mutate(`VOL` = as.numeric(gsub("%", "",`VOL`))) %>%
  rename("date" = date.x)

case_sample %>%
  summarise(across(c(MKT, SMB, HML, RMW, CMA, MOM, `VOL`), mean, na.rm = TRUE))
```

### AVERAGE RETURNS FULL TIME

```{r}
#| echo: false

long_sample <- factors %>%
  filter(yearmon >= as.yearmon("1994-01")) %>%
  mutate(`VOL` = as.numeric(gsub("%", "",`VOL`)))

# avg returns first period
long_sample %>%
  summarise(across(c(MKT, SMB, HML, RMW, CMA, MOM, `VOL`), mean, na.rm = TRUE))

etf_monthly_returns <- etf_monthly_returns %>%
  pivot_wider(names_from = symbol, values_from = monthly.returns)

big_sample <- case_sample %>%
  inner_join(etf_monthly_returns, by = "date")

```



```{r}
#| echo: false


# CAPM alphas

# func to calculate CAPM alpha for a list of factors
get_capm_alphas <- function(data, rf_col = "RF", mkt_col = "MKT", factor_names) {
  results <- data.frame(Factor = factor_names, Alpha = NA, Beta = NA)

  for (i in seq_along(factor_names)) {
    factor <- factor_names[i]
    factor_excess <- data[[factor]] - data[[rf_col]]
    mkt_excess <- data[[mkt_col]] - data[[rf_col]]

    model <- lm(factor_excess ~ mkt_excess)
    results$Alpha[i] <- coef(model)[1]
    results$Beta[i] <- coef(model)[2]
  }

  return(results)
}

```



```{r}
#| echo: false

# capm 2017 - 21

# note MKT is the market factor and should not be regressed on itself

# Define the list of factors
factor_list <- c("SMB", "HML", "RMW", "CMA", "MOM", "VOL")

# Subset case sample
capm_case_sample <- case_sample %>%
  select(date, MKT, RF, all_of(factor_list)) %>%
  drop_na()

# Calculate CAPM alphas for the short sample
capm_alphas_short <- get_capm_alphas(capm_case_sample, factor_names = factor_list)
capm_alphas_short$Alpha_Annualized <- capm_alphas_short$Alpha * 12
capm_alphas_short
```


```{r}
#| echo: false

# Subset long sample
capm_long_sample <- long_sample %>%
  select(date.x, MKT, RF, all_of(factor_list)) %>%
  drop_na()

# Calculate CAPM alphas for the long sample
capm_alphas_long <- get_capm_alphas(capm_long_sample, factor_names = factor_list)
capm_alphas_long$Alpha_Annualized <- capm_alphas_long$Alpha * 12
capm_alphas_long
```


```{r}
#| echo: false


#Question 6
run_regressions <- function(data, etf_names, factor_names, lag = 3) {
  models <- list()

  for (etf in etf_names) {
    y <- data[[paste0("excess_", etf)]]
    capm_formula <- as.formula(paste0("y ~ MKT"))
    seven_formula <- as.formula(paste0("y ~ ", paste(factor_names[-1], collapse = " + ")))

    capm_fit <- lm(capm_formula, data = data)
    seven_fit <- lm(seven_formula, data = data)

    nw_capm <- coeftest(capm_fit, vcov = NeweyWest(capm_fit, lag = lag, prewhite = FALSE))
    nw_seven <- coeftest(seven_fit, vcov = NeweyWest(seven_fit, lag = lag, prewhite = FALSE))

    models[[paste0(etf, "_CAPM")]] <- nw_capm
    models[[paste0(etf, "_7F")]] <- nw_seven
  }

  return(models)
}
```


```{r}
#| echo: false

factors <- factors |>
  rename(date = date.x)

full_data <- factors %>%
  inner_join(etf_monthly_returns, by = "date") %>%
  mutate(across(all_of(etfs), ~ .x - RF, .names = "excess_{col}"))
```


```{r}
#| echo: false

factors_all <- c("MKT", "SMB", "HML", "RMW", "CMA", "MOM", "VOL")
# this is not my finest most concise code


# Filter time periods
short_data <- full_data %>%
  filter(date >= as.Date("2017-12-01") & date <= as.Date("2021-02-28")) %>%
  drop_na()

long_data <- full_data %>%
  drop_na()

# HELP FOR SOME REASON THESE TIME PERIODS ARE NOT FILTERING -- FIX THIS
# BUG


# Run models
models_short <- run_regressions(short_data, etfs, factors_all)
# models_long <- run_regressions(long_data, etfs, factors_all)

```

```{r}
#| echo: false


adjust_annual_alpha <- function(model_list) {
  # Extract and annualize alpha
  alpha_annualizer <- function(x) {
    if ("(Intercept)" %in% rownames(x)) {
      x["(Intercept)", 1] <- x["(Intercept)", 1] * 12  # alpha
      x["(Intercept)", 2] <- x["(Intercept)", 2] * 12  # std error
    }
    x
  }

  # Apply to all models
  adjusted_models <- lapply(model_list, alpha_annualizer)
  
  return(adjusted_models)
}
```


```{r}
#| echo: false

models_short_adj <- adjust_annual_alpha(models_short)
# models_long_adj  <- adjust_annual_alpha(models_long)

modelsummary(models_short_adj,
             coef_map = c("(Intercept)" = "Alpha (annualized)"),
             title = "Short Sample (2017–2021) Regressions",
             gof_omit = ".*")

# modelsummary(models_long_adj,
#              coef_map = c("(Intercept)" = "Alpha (annualized)"),
#              title = "Long Sample (1994–2024) Regressions",
#              gof_omit = ".*")
```


